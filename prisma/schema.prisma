generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PlanType {
  FREE
  BASIC
  PERSONAL
  PRO
  GOLD
}

enum SocialType {
  LINKEDIN
  FACEBOOK
  TWITTER
  INSTAGRAM
  WHATSAPP
  CELLPHONE
}

enum MuscleType {
  CHEST
  BACK
  BICEPS
  TRICEPS
  SHOULDERS
  LEGS
  CALVES
  ABS
  FULL_BODY
  GLUTES
  HAMSTRINGS
  QUADRICEPS
  ADDUCTORS_ABDUCTORS
}

enum ExecutionType {
  REPETITION
  TIME
}

enum Role {
  USER
  MANAGER
  PERSONAL
}

enum ImageType {
  AVATAR
  GALLERY
  WORKOUT_BANNER
  EXERCISE_BANNER
  OTHER
}

enum UserGender {
  MALE
  FEMALE
  NON_BINARY
  TRANSGENDER
  PREFER_NOT_TO_SAY
  OTHER
}

model User {
  id            String         @id @unique @default(uuid())
  name          String
  lastName      String
  email         String         @unique
  phone         String?
  birthDate     DateTime?
  gender        UserGender?
  password      String
  role          Role           @default(USER)
  disabled      DateTime?
  image         Image[]        @relation("UserImages")
  plan          Plan?          @relation("UserPlan")
  socialMedias  SocialMedia[]  @relation("UserSocialMedias")
  workouts      Workout[]      @relation("UserWorkouts")
  sessions      Session[]      @relation("WorkoutUserSessions")
  exercises     Exercise[]     @relation("UserExercises")
  logs          Log[]          @relation("UserLogs")
  PhysicalStats PhysicalStats? @relation("UserPhysicalStats")
  address       Address?       @relation("UserAddress")
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("user")
}

model PhysicalStats {
  id         String   @id @default(uuid())
  height     Float
  weight     Float
  age        Int
  bodyFat    Float?
  muscleMass Float?
  goal       String
  user       User     @relation("UserPhysicalStats", fields: [userId], references: [id])
  userId     String   @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@map("physical_stats")
}

model Address {
  id           String   @id @default(uuid())
  street       String
  city         String
  state        String
  zipCode      Int
  country      String
  neighborhood String
  user         User     @relation("UserAddress", fields: [userId], references: [id])
  userId       String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("address")
}

model Image {
  id               String    @id @default(uuid())
  url              String
  blurHash         String
  uploadUniqueName String
  type             ImageType
  userId           String
  user             User      @relation("UserImages", fields: [userId], references: [id], onDelete: Cascade)
  workoutId        String?   @unique
  workout          Workout?  @relation("ImageWorkout", fields: [workoutId], references: [id])
  exerciseId       String?   @unique
  exercise         Exercise? @relation("ImageExercise", fields: [exerciseId], references: [id])
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@unique([userId, id])
  @@map("image")
}

model Plan {
  id        String   @id @default(uuid())
  name      String
  type      PlanType @default(FREE)
  price     Float
  userId    String   @unique
  user      User     @relation("UserPlan", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiresAt DateTime

  @@map("plan")
}

model SocialMedia {
  id        String     @id @unique @default(uuid())
  type      SocialType
  icon      String
  url       String
  userId    String
  user      User       @relation("UserSocialMedias", fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([type, icon])
  @@map("social_media")
}

model Workout {
  id          String     @id @default(uuid())
  name        String
  description String
  icon        String
  color       String
  userId      String
  user        User       @relation("UserWorkouts", fields: [userId], references: [id], onDelete: Cascade)
  banner      Image?     @relation("ImageWorkout")
  session     Session[]  @relation("WorkoutSession")
  exercises   Exercise[] @relation("WorkoutExercises")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("workout")
}

model Session {
  id        String    @id @default(uuid())
  startTime DateTime  @default(now())
  endTime   DateTime?
  userId    String
  user      User?     @relation("WorkoutUserSessions", fields: [userId], references: [id], onDelete: Cascade)
  workoutId String
  workout   Workout   @relation("WorkoutSession", fields: [workoutId], references: [id], onDelete: Cascade)
  logs      Log[]     @relation("SessionLogs")
  createdAt DateTime  @default(now())

  @@map("session")
}

model Exercise {
  id                String        @id @default(uuid())
  name              String
  description       String
  muscleType        MuscleType
  executionType     ExecutionType
  targetSets        Int
  targetResTime     Int
  targetRepetitions Int
  videoReference    String?
  banner            Image?        @relation("ImageExercise")
  workoutId         String
  workout           Workout       @relation("WorkoutExercises", fields: [workoutId], references: [id], onDelete: Cascade)
  logs              Log[]         @relation("ExerciseLogs")
  user              User          @relation("UserExercises", fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  @@map("exercise")
}

model Log {
  id              String    @id @default(uuid())
  maxSeries       Int
  maxWeight       Int
  maxRepeat       Int
  averageRestTime Int
  effortLevel     Int
  notes           String?
  sessionId       String?
  session         Session?  @relation("SessionLogs", fields: [sessionId], references: [id], onDelete: Cascade)
  exerciseId      String?
  exercise        Exercise? @relation("ExerciseLogs", fields: [exerciseId], references: [id], onDelete: Cascade)
  userId          String
  user            User      @relation("UserLogs", fields: [userId], references: [id], onDelete: Cascade)
  createdAt       DateTime  @default(now())

  @@map("log")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationEmailToken {
  id        String   @id @default(uuid())
  email     String   @unique
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
